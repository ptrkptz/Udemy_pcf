7
Google search Install the CF CLI

from terminal - type cf
- should output info if installed correctly


8 Space, Organizations and Roles

Organization can have one or more Space
Space
  - staging and development
 Roles
  - allow to group permissions
  
9 Logging into Space from CLI
terminal window
cf login
  api endpoint used -  if not found https://api.run.pivotal.io (saved in properties file)
Email/Password
  this wil authenticate you

Note
  Org: [your name]-org
  Space: development
    this space is auto created

10 Logging in to space via UI
Sign into account
Where to?
  Pivotal web services

13 Application Services
- on demand resources = services
  -- provisioning
- Two types of Service Instances
 - Managed Service Instance
    -- Use bind command to add service
 - User defined Service Instance

- Multiple Deployment Options
  
  
14 Create service instances in CF
cf marketplace 
  once you find something you can add by using:
cf create-service mongolab sandbox mongoservice
  mongolab - create service using mongolab
  sandbox - 
  mongoservice - name I gave it

15 - push first application
droplet = actual raw code

19 - service models in the cloud
  SaaS - Software as a Service
  PaaS - Platform as a Service
    Google cloud, Azure, CF
  IaaS - Infrastructure as a Service
    Amazon EC2

21 Applicationss manifest with YAML
 -describe your application deployment
 -cf first tries to locate manifest.yml in same directory
  -- if not found cf applies default (for name, memory, etc)
  -- cf -f [manifest path]
 -required and optional fields
  -- name of app, memory and build pack (tell cf about the evn your application needs to run on)
 - very useful for continuous integration and deploymeny
 - can define more than one application to a single manifest.yml
 - simplest way to deal with cf application
 
22 create a YAML manifest 
- create new file in root
-- manifest.yml

23 redploy application using manifest
- if yml in same as code
- cf push

24 what happens when we deploy an appl to CF
- use cf push
- cloud controll receives push event and metadata
- cloud controller receives raw source code ans stores in BLOB
- cloud controller institiates app startup
- cloud controller chooses the DEA for the app
- DEA streams out app inf around
- DEA create an image of the app and stores in BLOB

25 Dev a Spring + PostgreSQL DB app 
26 Deploy Spring + PostgreSQL DB app 

28 what is platform
- anything you can leverage to accomplish a task
- you don't start from scratch
- well known software are windows Mac OS
- can extend to Linux, Unix, Android, iOS

29 what is PaaS (see Trad_Iaas_PaaS)
- history - you had to monitor everything... app, data, servers, network, etc
- IaaS - Providers manage some (servers, network, storage, etc), but still had to manage other
- Paas - Middleware, OS and above are managed, now you only have to manage App and Data

30 Goals of PaaS
- make easier to run application and not have to worry about traffic/load
- you deploy, and platform figures out the rest
- scale seamlessly, so you can focus on code

31 PaaS on the market
Cloud Foundry
Amazon Web Services
Google cloud Platform
IBM Bluemix
Microsoft Azure
SAP cloud platform

32 12-factor apps and design consideration for PaaS
  - guidelines
1. code is version controlled
  be able to ship to other environments without issues
2. Dependencies are declared and isolated
  declared in manifest files
3. Config is stored in the Environment
  database connects differ from environment to environment -- need to be stored in config
4. Backing Services as Attached Resources
  queuing, caching
  you can attach and deattach easily
5. Build and Run stages are seperate
6. Applicatoin executed as stateless processes
  if crashes, should be isolated, if state is needed, it needs to be captured elsewhere
7. Services are Exported via Port Binding
  *this is the most important
8. Applications scaled out via process model
  scaling horizontally
9. Process are disposable
  minimal startup and graceful shutdown are key
10. Parity between application environments
  design for continuous deployment
11. Logs treated as event streams
  carry application state
  apps should log for events
12. Management tasks run as one-off processes
  if cloud env, we should run scripts in the cloud (not on local CLI) - possible side-effects
  
33 Antipatterns for PaaS
Rely on local file system
  use resources as services
Scaling up services the old way
Trying to changing code on the server-side
Manually coordinating builds
Hard-coding configuration
Trying to be monolithic everywhere




 
